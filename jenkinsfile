node {
    
    stage('Descargar fuentes') {
        git credentialsId: 'joaquin121416@gmail.com', url: 'D:/DevOps/facturacion-web'
    }

    stage('Compilar') {
        bat 'mvn  clean compile'
    }
    
    stage('Pruebas Unitarias') {
        
        bat 'mvn  test'
        
        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/*.xml'])
        
    }
    
   stage ('Pruebas Integracion'){
	    echo 'Ejecutando pruebas de integracion....'
	    bat 'mvn verify -DskipUTs=true' 
	    junit '**/target/failsafe-reports/*.xml'
	    
	   
	}
    
  	stage ('analisis de codigo'){
	echo 'Analisis de codigo....'
		withSonarQubeEnv('sonar-devops'){
		bat 'mvn sonar:sonar'
		
		def qg = waitForQualityGate() 
         
  			 if (qg.status != 'OK') {
      
        error "La aplicación no cumple con los estándares de calidad: ${qg.status}"
   
         }    
   
        
		}
	}

    
    stage ('Build'){
		echo 'Generando el build del proyecto....'
		bat 'mvn package -DskipTests=true'
	}
          
	stage ('Versionar'){
	echo 'Subiendo artefacto al servidor Artifactory....'
	
	def server = Artifactory.server 'MiArtifactory' 
	
        def uploadSpec = """{ 

          "files": [ 

            { 
				
              "pattern": "/target/*.jar", 
			
              "target": "facturacion-web/desarrollo/${BUILD_NUMBER}/", 

              "props": "pruebas-unitarias=si;pruebas-integracion=si;analisis-codigo-estatico=si" 

            } 

          ] 

        }""" 

        server.upload(uploadSpec) 
    
    
    }
}


